import heapq
def cmder(leftdq,rightdq,arr, cmd):
    deleted = []
    for x in cmd:
        if x[0] == 'U':
            num = int(x[2:])
            for _ in range(num):
                heapq.heappush(rightdq, -heapq.heappop(leftdq))
        elif x[0] == 'D':
            num = int(x[2:])
            for _ in range(num):
                heapq.heappush(leftdq, -heapq.heappop(rightdq))
        elif x[0] == 'C':
            arr[-leftdq[0]] = 'X'
            deleted.append(-heapq.heappop(leftdq))
            if len(rightdq)>0:
                heapq.heappush(leftdq, -heapq.heappop(rightdq))
        elif x[0] == 'Z':
            arr[deleted[-1]] = 'O'
            if deleted[-1] < -leftdq[0]:
                heapq.heappush(leftdq,-deleted.pop())
            else:
                heapq.heappush(rightdq, deleted.pop())
            
            
        



def solution(n, k, cmd):
    leftdq = []
    rightdq = []
    arr = ['O' for _ in range(n)]
    for i in range(k+1):
        heapq.heappush(leftdq,-i)
    for j in range(k+1,n):
        heapq.heappush(rightdq,j)
    
    cmder(leftdq,rightdq,arr, cmd)
    
        
    return "".join(arr)